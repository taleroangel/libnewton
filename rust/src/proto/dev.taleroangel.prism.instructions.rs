// @generated
// This file is @generated by prost-build.
/// Set of instructions available to Prism Assembly Language and Prism Binary Format
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum InstructionSet {
    /// (No Operation) Do nothing
    Nop = 0,
    /// Marks the beginning of a new script (Clears the machine state)\
    /// marks TRANSMIT flag as False, SCRIPT flag as True and HALT flag as False\
    /// must always be the first instruction inside a script, the script starts running when RUN is reached
    Begin = 1,
    /// Marks the end of a script (important!) and starts running it
    Run = 2,
    /// Disables the state machine (no branching, no $PC) for transmitting real time data\
    /// marks TRANSMIT flag as True, SCRIPT flag as False and HALT flag as False\
    /// TRANSMIT mode is the default mode at startup\
    /// Beware: TRANSMIT mode disables branching as there is no state to keep
    Transmit = 3,
    /// Stop execution, sets the HALT flag to True and set the $SC with the value
    /// provided
    Halt = 4,
    /// (Absolute Indexing) Use absolute indexing when the size of the buffer is unknown\
    /// marks IX flag as True\
    /// Beware: Absolute index can cause buffer overflowing, in that case the OW flag is set
    Aidx = 5,
    /// (Relative InDeXing) Use relative indexing mapping from (0 - 100%) of the total buffer size\
    /// marks IX flag as False
    Ridx = 6,
    /// Hold instructions until an UPDATE is issued\
    /// marks HOLD flag as True
    Hold = 7,
    /// (No) hold, makes instructions effects immediate, effectively disabling UPDATE\
    /// if NHOLD is called before UPDATE then the instructions are dropped\
    /// marks HOLD flag as False and resets $PO
    Nhold = 8,
    /// Apply instructions on hold\
    /// resets $PO (pending operations)
    Update = 9,
    /// (Jump) to another part of the script\
    /// copies $PC value into $PP and then sets $PC to the provided value\
    /// Beware: This instructions (and every other branching instruction) is disabled on TRANSMIT mode
    Jmp = 10,
    /// (Return) from a JMP\
    /// copies $PP into $PC, and sets the value of $RV (return value)\
    /// Beware: This instructions (and every other branching instruction) is disabled on TRANSMIT mode
    Ret = 11,
    /// (Branch if Equal) Does a JMP only if arguments A and B are equal\
    /// Beware: This instructions (and every other branching instruction) is disabled on TRANSMIT mode\
    /// no addressing mode supported on third (C) parameter, it must reference a label or absolute position in the script
    Beq = 12,
    /// (Branch if Not Equal) Does a JMP only if arguments A and B are NOT equal\
    /// Beware: This instructions (and every other branching instruction) is disabled on TRANSMIT mode\
    /// no addressing mode supported on third (C) parameter, it must reference a label or absolute position in the script
    Bne = 13,
    /// Load a new value into a register
    Load = 16,
    /// Add a given value to a register's contents
    Add = 17,
    /// (Substract) a given value to a register's contents
    Sub = 18,
    /// Change the color of a range of LEDs specifiyng all of the three HSL
    /// parameters
    Fill = 19,
    /// Change the color of a range of LEDs specifying only Hue (HSL)
    Hfill = 20,
    /// Change the color of a range of LEDs specifying only Saturation (HSL)
    Sfill = 21,
    /// Change the color of a range of LEDs specifying only Level (HSL)
    Lfill = 22,
    /// Change the color of only one LED specifiyng all of the three HSL parameters
    Paint = 23,
    /// Change the color of only one LED specifiyng only Hue (HSL)
    Hpaint = 24,
    /// Change the color of only one LED specifiyng only Saturation (HSL)
    Spaint = 25,
    /// Change the color of only one LED specifiyng only Level (HSL)
    Lpaint = 26,
    /// Apply an effect to a range of LEDs
    /// First argument (\[EffectCode\]) is not considered a parameter (A or B)}
    Effect = 27,
    /// Delay execution for a given amount of time\
    /// First argument (\[DelayCode\]) is not considered a parameter (A or B)
    Delay = 28,
    /// Pause the script execution, can be resumed with RUN
    Pause = 29,
    /// Get the contents of a registers\
    /// some devices might not be able to transmit data
    Get = 30,
    /// Does a complete restart of all registers, flags, and memory contents
    Reset = 31,
}
impl InstructionSet {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            InstructionSet::Nop => "NOP",
            InstructionSet::Begin => "BEGIN",
            InstructionSet::Run => "RUN",
            InstructionSet::Transmit => "TRANSMIT",
            InstructionSet::Halt => "HALT",
            InstructionSet::Aidx => "AIDX",
            InstructionSet::Ridx => "RIDX",
            InstructionSet::Hold => "HOLD",
            InstructionSet::Nhold => "NHOLD",
            InstructionSet::Update => "UPDATE",
            InstructionSet::Jmp => "JMP",
            InstructionSet::Ret => "RET",
            InstructionSet::Beq => "BEQ",
            InstructionSet::Bne => "BNE",
            InstructionSet::Load => "LOAD",
            InstructionSet::Add => "ADD",
            InstructionSet::Sub => "SUB",
            InstructionSet::Fill => "FILL",
            InstructionSet::Hfill => "HFILL",
            InstructionSet::Sfill => "SFILL",
            InstructionSet::Lfill => "LFILL",
            InstructionSet::Paint => "PAINT",
            InstructionSet::Hpaint => "HPAINT",
            InstructionSet::Spaint => "SPAINT",
            InstructionSet::Lpaint => "LPAINT",
            InstructionSet::Effect => "EFFECT",
            InstructionSet::Delay => "DELAY",
            InstructionSet::Pause => "PAUSE",
            InstructionSet::Get => "GET",
            InstructionSet::Reset => "RESET",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "NOP" => Some(Self::Nop),
            "BEGIN" => Some(Self::Begin),
            "RUN" => Some(Self::Run),
            "TRANSMIT" => Some(Self::Transmit),
            "HALT" => Some(Self::Halt),
            "AIDX" => Some(Self::Aidx),
            "RIDX" => Some(Self::Ridx),
            "HOLD" => Some(Self::Hold),
            "NHOLD" => Some(Self::Nhold),
            "UPDATE" => Some(Self::Update),
            "JMP" => Some(Self::Jmp),
            "RET" => Some(Self::Ret),
            "BEQ" => Some(Self::Beq),
            "BNE" => Some(Self::Bne),
            "LOAD" => Some(Self::Load),
            "ADD" => Some(Self::Add),
            "SUB" => Some(Self::Sub),
            "FILL" => Some(Self::Fill),
            "HFILL" => Some(Self::Hfill),
            "SFILL" => Some(Self::Sfill),
            "LFILL" => Some(Self::Lfill),
            "PAINT" => Some(Self::Paint),
            "HPAINT" => Some(Self::Hpaint),
            "SPAINT" => Some(Self::Spaint),
            "LPAINT" => Some(Self::Lpaint),
            "EFFECT" => Some(Self::Effect),
            "DELAY" => Some(Self::Delay),
            "PAUSE" => Some(Self::Pause),
            "GET" => Some(Self::Get),
            "RESET" => Some(Self::Reset),
            _ => None,
        }
    }
}
// @@protoc_insertion_point(module)
