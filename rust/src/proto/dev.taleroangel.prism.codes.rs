// @generated
// This file is @generated by prost-build.
/// / Designates the code for a given delay time unit
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum DelayCode {
    /// / Delay for milliseconds
    Ms = 0,
    /// / Delay for seconds
    Sec = 1,
    /// / Delay for minutes
    Min = 2,
    /// / Delay for hours
    Hrs = 3,
}
impl DelayCode {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            DelayCode::Ms => "MS",
            DelayCode::Sec => "SEC",
            DelayCode::Min => "MIN",
            DelayCode::Hrs => "HRS",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MS" => Some(Self::Ms),
            "SEC" => Some(Self::Sec),
            "MIN" => Some(Self::Min),
            "HRS" => Some(Self::Hrs),
            _ => None,
        }
    }
}
/// / Codes corresponding to the standard effects
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum EffectCode {
    /// / Dim lights an specified amount
    Dim = 0,
    /// / Blend colors in a range
    Blend = 1,
}
impl EffectCode {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            EffectCode::Dim => "DIM",
            EffectCode::Blend => "BLEND",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "DIM" => Some(Self::Dim),
            "BLEND" => Some(Self::Blend),
            _ => None,
        }
    }
}
// @@protoc_insertion_point(module)
